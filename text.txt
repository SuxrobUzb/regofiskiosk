app.py
from flask import Flask, jsonify, request, render_template, redirect, url_for, session, abort
from flask_socketio import SocketIO, emit
from flask_cors import CORS
from flask_session import Session
import sqlite3
from datetime import datetime
import secrets
import logging
import getpass
from dotenv import load_dotenv
import os

# Загружаем переменные из .env
load_dotenv()

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)
app.config["SESSION_TYPE"] = "filesystem"
Session(app)
socketio = SocketIO(app, cors_allowed_origins="*")
CORS(app)

# Получаем SERVER_URL из .env
SERVER_URL = os.getenv("SERVER_URL", "http://localhost:5000")

# Настройка логирования
logging.basicConfig(level=logging.INFO, filename='app.log', format='%(asctime)s - %(levelname)s - %(message)s')

# Декоратор для проверки авторизации оператора
def login_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'operator_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Декоратор для проверки авторизации администратора
def admin_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'admin_id' not in session:
            return redirect(url_for('admin_login'))
        return f(*args, **kwargs)
    return decorated_function

# Инициализация базы данных
def init_db():
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
                 id INTEGER PRIMARY KEY, 
                 name TEXT, 
                 parent_id INTEGER, 
                 FOREIGN KEY(parent_id) REFERENCES categories(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS services (
                 id INTEGER PRIMARY KEY, 
                 name TEXT, 
                 category_id INTEGER, 
                 FOREIGN KEY(category_id) REFERENCES categories(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS operators (
                 id INTEGER PRIMARY KEY, 
                 name TEXT, 
                 password TEXT, 
                 status TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS operator_services (
                 operator_id INTEGER, 
                 service_id INTEGER, 
                 FOREIGN KEY(operator_id) REFERENCES operators(id), 
                 FOREIGN KEY(service_id) REFERENCES services(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS tickets (
                 id INTEGER PRIMARY KEY AUTOINCREMENT, 
                 number TEXT, 
                 service_id INTEGER, 
                 status TEXT, 
                 operator_id INTEGER, 
                 created_at TEXT, 
                 finished_at TEXT, 
                 kiosk_id INTEGER,
                 FOREIGN KEY(service_id) REFERENCES services(id), 
                 FOREIGN KEY(operator_id) REFERENCES operators(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS messages (
                 id INTEGER PRIMARY KEY AUTOINCREMENT, 
                 operator_id INTEGER, 
                 content TEXT, 
                 timestamp TEXT, 
                 FOREIGN KEY(operator_id) REFERENCES operators(id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS admin_users (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT UNIQUE NOT NULL,
                 password TEXT NOT NULL)''')
    conn.commit()

    # Проверяем наличие администратора
    c.execute("SELECT COUNT(*) FROM admin_users")
    admin_count = c.fetchone()[0]
    if admin_count == 0:
        print("Администратор не найден. Создание нового администратора.")
        username = input("Введите имя пользователя для администратора: ")
        password = getpass.getpass("Введите пароль для администратора: ")
        c.execute("INSERT INTO admin_users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
        logging.info(f"Создан новый администратор: {username}")
    conn.close()

# Проверка уровня вложенности категорий
def get_category_depth(category_id):
    conn = sqlite3.connect('regoffice.db')
    depth = 0
    current_id = category_id
    c = conn.cursor()
    while current_id:
        c.execute("SELECT parent_id FROM categories WHERE id = ?", (current_id,))
        result = c.fetchone()
        if not result or result[0] is None:
            break
        current_id = result[0]
        depth += 1
        if depth >= 10:
            return 10
    conn.close()
    return depth

@app.route('/')
def index():
    return render_template('index.html', server_url=SERVER_URL)

@app.route('/categories', methods=['GET'])
def get_categories():
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT id, name, parent_id FROM categories WHERE parent_id IS NULL")
    categories = [{"id": row[0], "name": row[1], "isCategory": True, "isSubcategory": False} for row in c.fetchall()]
    conn.close()
    return jsonify(categories)

@app.route('/services/<int:category_id>', methods=['GET'])
def get_services(category_id):
    page = int(request.args.get('page', 1))
    per_page = 10
    offset = (page - 1) * per_page

    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    # Получаем подкатегории
    c.execute("SELECT id, name, parent_id FROM categories WHERE parent_id = ? LIMIT ? OFFSET ?", 
              (category_id, per_page, offset))
    subcategories = [{"id": row[0], "name": row[1], "isCategory": True, "isSubcategory": row[2] is not None} for row in c.fetchall()]
    c.execute("SELECT COUNT(*) FROM categories WHERE parent_id = ?", (category_id,))
    total_subcategories = c.fetchone()[0]
    
    # Получаем услуги
    c.execute("SELECT id, name, category_id FROM services WHERE category_id = ? LIMIT ? OFFSET ?", 
              (category_id, per_page, offset))
    services = [{"id": row[0], "name": row[1], "isCategory": False, "isSubcategory": False, "category_id": row[2]} for row in c.fetchall()]
    c.execute("SELECT COUNT(*) FROM services WHERE category_id = ?", (category_id,))
    total_services = c.fetchone()[0]
    
    # Объединяем подкатегории и услуги
    items = subcategories + services
    total = total_subcategories + total_services
    
    conn.close()
    return jsonify({
        "items": items,
        "total": total,
        "page": page,
        "per_page": per_page
    })

@app.route('/get_ticket', methods=['POST'])
def get_ticket():
    data = request.get_json()
    service_id = data.get('service_id')
    lang = data.get('lang', 'uz_lat')
    kiosk_id = data.get('kiosk_id', 1)
    
    logging.info(f"Received get_ticket request: service_id={service_id}, lang={lang}, kiosk_id={kiosk_id}")
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM tickets WHERE service_id = ? AND DATE(created_at) = DATE('now')", (service_id,))
    count = c.fetchone()[0] + 1
    ticket_number = f"{service_id:02d}-{count:03d}"
    
    c.execute("SELECT AVG(strftime('%s', finished_at) - strftime('%s', created_at)) / 60 FROM tickets WHERE service_id = ? AND finished_at IS NOT NULL", (service_id,))
    avg_time = c.fetchone()[0] or 5
    wait_time = round(avg_time * count / 60)
    
    # Автоматическое назначение оператора
    c.execute("SELECT operator_id FROM operator_services WHERE service_id = ? LIMIT 1", (service_id,))
    operator = c.fetchone()
    operator_id = operator[0] if operator else None
    
    c.execute("INSERT INTO tickets (number, service_id, status, operator_id, created_at, kiosk_id) VALUES (?, ?, 'waiting', ?, ?, ?)", 
              (ticket_number, service_id, operator_id, datetime.now().isoformat(), kiosk_id))
    conn.commit()
    
    # Уведомление через WebSocket
    socketio.emit('new_ticket', {'ticket': ticket_number, 'service_id': service_id, 'operator_id': operator_id})
    logging.info(f"New ticket created: {ticket_number} for service {service_id}, assigned to operator {operator_id or 'None'}")
    
    conn.close()
    return jsonify({"ticket": ticket_number, "wait_time": wait_time})

@app.route('/admin_login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        conn = sqlite3.connect('regoffice.db')
        c = conn.cursor()
        c.execute("SELECT id FROM admin_users WHERE username = ? AND password = ?", (username, password))
        admin = c.fetchone()
        conn.close()
        
        if admin:
            session['admin_id'] = admin[0]
            logging.info(f"Admin {username} logged in")
            return redirect(url_for('admin'))
        else:
            logging.warning(f"Failed admin login attempt for {username}")
            return render_template('admin_login.html', error="Noto‘g‘ri login yoki parol", server_url=SERVER_URL)
    return render_template('admin_login.html', server_url=SERVER_URL)

@app.route('/admin_logout')
def admin_logout():
    session.pop('admin_id', None)
    logging.info("Admin logged out")
    return redirect(url_for('admin_login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        operator_id = request.form.get('operator_id')
        password = request.form.get('password')
        
        conn = sqlite3.connect('regoffice.db')
        c = conn.cursor()
        c.execute("SELECT id, password FROM operators WHERE id = ? AND password = ?", (operator_id, password))
        operator = c.fetchone()
        conn.close()
        
        if operator:
            session['operator_id'] = operator[0]
            logging.info(f"Operator {operator_id} logged in")
            return redirect(url_for('operator'))
        else:
            logging.warning(f"Failed login attempt for operator {operator_id}")
            return render_template('login.html', error="Noto‘g‘ri ID yoki parol", server_url=SERVER_URL)
    return render_template('login.html', server_url=SERVER_URL)

@app.route('/logout')
@login_required
def logout():
    operator_id = session.pop('operator_id', None)
    logging.info(f"Operator {operator_id} logged out")
    return redirect(url_for('login'))

@app.route('/operator')
@login_required
def operator():
    operator_id = session['operator_id']
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    c.execute("SELECT id, name FROM operators")
    operators = c.fetchall()
    
    c.execute("SELECT number, status FROM tickets WHERE operator_id = ? AND status IN ('waiting', 'called')", (operator_id,))
    tickets = c.fetchall()
    
    c.execute("SELECT operator_id, content, timestamp FROM messages ORDER BY timestamp DESC LIMIT 50")
    messages = c.fetchall()
    
    conn.close()
    return render_template('operator.html', operator_id=operator_id, operators=operators, tickets=tickets, messages=messages, server_url=SERVER_URL)

@app.route('/tablet/<int:operator_id>/data')
@login_required
def tablet_data(operator_id):
    if session['operator_id'] != operator_id:
        abort(403)
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT number, status FROM tickets WHERE operator_id = ? AND status IN ('waiting', 'called')", (operator_id,))
    tickets = [{"number": row[0], "status": row[1]} for row in c.fetchall()]
    conn.close()
    return jsonify(tickets)

@app.route('/call_ticket', methods=['POST'])
@login_required
def call_ticket():
    operator_id = session['operator_id']
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    c.execute("SELECT number FROM tickets WHERE operator_id = ? AND status = 'called'", (operator_id,))
    current_ticket = c.fetchone()
    if current_ticket:
        conn.close()
        return jsonify({"error": "Sizda allaqachon chaqirilgan taloon bor!"}), 400
    
    c.execute("SELECT id, number FROM tickets WHERE status = 'waiting' AND service_id IN (SELECT service_id FROM operator_services WHERE operator_id = ?) ORDER BY created_at LIMIT 1", (operator_id,))
    ticket = c.fetchone()
    
    if ticket:
        ticket_id, ticket_number = ticket
        c.execute("UPDATE tickets SET status = 'called', operator_id = ? WHERE id = ?", (operator_id, ticket_id))
        conn.commit()
        socketio.emit('update_queue', {'ticket': ticket_number, 'operator_id': operator_id})
        logging.info(f"Operator {operator_id} called ticket {ticket_number}")
    conn.close()
    return jsonify({"ticket": ticket_number if ticket else None})

@app.route('/finish_ticket', methods=['POST'])
@login_required
def finish_ticket():
    data = request.get_json()
    ticket = data.get('ticket')
    operator_id = session['operator_id']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("UPDATE tickets SET status = 'finished', finished_at = ? WHERE number = ? AND operator_id = ?", 
              (datetime.now().isoformat(), ticket, operator_id))
    if c.rowcount == 0:
        conn.close()
        return jsonify({"error": "Talon topilmadi yoki sizniki emas"}), 400
    
    conn.commit()
    socketio.emit('remove_ticket', {'ticket': ticket})
    logging.info(f"Operator {operator_id} finished ticket {ticket}")
    conn.close()
    return jsonify({"status": "ok"})

@app.route('/redirect_ticket', methods=['POST'])
@login_required
def redirect_ticket():
    data = request.get_json()
    ticket = data.get('ticket')
    new_operator_id = data.get('new_operator_id')
    operator_id = session['operator_id']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("UPDATE tickets SET operator_id = ?, status = 'waiting' WHERE number = ? AND operator_id = ?", 
              (new_operator_id, ticket, operator_id))
    if c.rowcount == 0:
        conn.close()
        return jsonify({"error": "Talon topilmadi yoki sizniki emas"}), 400
    
    conn.commit()
    socketio.emit('remove_ticket', {'ticket': ticket})
    socketio.emit('update_queue', {'ticket': ticket, 'operator_id': new_operator_id})
    logging.info(f"Operator {operator_id} redirected ticket {ticket} to {new_operator_id}")
    conn.close()
    return jsonify({"status": "ok"})

@app.route('/send_message', methods=['POST'])
@login_required
def send_message():
    data = request.get_json()
    operator_id = session['operator_id']
    content = data.get('content')
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    timestamp = datetime.now().isoformat()
    c.execute("INSERT INTO messages (operator_id, content, timestamp) VALUES (?, ?, ?)", 
              (operator_id, content, timestamp))
    conn.commit()
    socketio.emit('new_message', {'operator_id': operator_id, 'content': content, 'timestamp': timestamp})
    logging.info(f"Operator {operator_id} sent message: {content}")
    conn.close()
    return jsonify({"status": "ok"})

@app.route('/admin')
@admin_required
def admin():
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    c.execute("SELECT id, name, parent_id FROM categories")
    categories = c.fetchall()
    
    c.execute("SELECT s.id, s.name, c.name FROM services s JOIN categories c ON s.category_id = c.id")
    services = c.fetchall()
    
    c.execute("SELECT id, name, status FROM operators")
    operators = c.fetchall()
    
    c.execute("SELECT operator_id, service_id FROM operator_services")
    operator_services = c.fetchall()
    
    c.execute("SELECT number, service_id FROM tickets WHERE status = 'waiting'")
    waiting = c.fetchall()
    
    c.execute("SELECT number, service_id, operator_id, created_at, finished_at FROM tickets WHERE status = 'finished'")
    stats = c.fetchall()
    
    c.execute("SELECT AVG(strftime('%s', finished_at) - strftime('%s', created_at)) / 60 FROM tickets WHERE finished_at IS NOT NULL")
    avg_time = round(c.fetchone()[0] or 0, 2)
    
    conn.close()
    return render_template('admin.html', categories=categories, services=services, operators=operators, 
                           operator_services=operator_services, waiting=waiting, stats=stats, avg_time=avg_time, server_url=SERVER_URL)

@app.route('/add_category', methods=['POST'])
@admin_required
def add_category():
    name = request.form.get('name')
    parent_id = request.form.get('parent_id')
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    if parent_id:
        depth = get_category_depth(int(parent_id))
        if depth >= 9:
            conn.close()
            logging.warning(f"Cannot add category '{name}' under {parent_id}: maximum depth (10) reached")
            return jsonify({"status": "error", "message": "Maksimal 10 darajali kategoriya chegarasiga yetdi"}), 400
    
    c.execute("INSERT INTO categories (name, parent_id) VALUES (?, ?)", (name, parent_id or None))
    conn.commit()
    conn.close()
    logging.info(f"New category added: {name} (parent_id: {parent_id or 'None'})")
    return redirect(url_for('admin'))

@app.route('/edit_category', methods=['POST'])
@admin_required
def edit_category():
    data = request.get_json()
    category_id = data['id']
    new_name = data['name']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("UPDATE categories SET name = ? WHERE id = ?", (new_name, category_id))
    conn.commit()
    conn.close()
    logging.info(f"Category {category_id} edited: {new_name}")
    return jsonify({"status": "ok"})

@app.route('/delete_category', methods=['POST'])
@admin_required
def delete_category():
    data = request.get_json()
    category_id = data['id']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    
    # Проверяем, есть ли подкатегории
    c.execute("SELECT COUNT(*) FROM categories WHERE parent_id = ?", (category_id,))
    subcategories_count = c.fetchone()[0]
    
    # Проверяем, есть ли услуги
    c.execute("SELECT COUNT(*) FROM services WHERE category_id = ?", (category_id,))
    services_count = c.fetchone()[0]
    
    if subcategories_count > 0 or services_count > 0:
        conn.close()
        logging.warning(f"Cannot delete category {category_id}: it has {subcategories_count} subcategories and {services_count} services")
        return jsonify({"status": "error", "message": "Kategoriyani o‘chirish mumkin emas, chunki unda xizmatlar yoki podkategoriyalar bor"}), 400
    
    c.execute("DELETE FROM categories WHERE id = ?", (category_id,))
    conn.commit()
    conn.close()
    logging.info(f"Category {category_id} deleted")
    return jsonify({"status": "ok"})

@app.route('/add_service', methods=['POST'])
@admin_required
def add_service():
    name = request.form.get('name')
    category_id = request.form.get('category_id')
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("INSERT INTO services (name, category_id) VALUES (?, ?)", (name, category_id))
    conn.commit()
    conn.close()
    logging.info(f"New service added: {name} in category {category_id}")
    return redirect(url_for('admin'))

@app.route('/edit_service', methods=['POST'])
@admin_required
def edit_service():
    data = request.get_json()
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("UPDATE services SET name = ? WHERE id = ?", (data['name'], data['id']))
    conn.commit()
    conn.close()
    logging.info(f"Service {data['id']} edited: {data['name']}")
    return jsonify({"status": "ok"})

@app.route('/delete_service', methods=['POST'])
@admin_required
def delete_service():
    data = request.get_json()
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("DELETE FROM services WHERE id = ?", (data['id'],))
    conn.commit()
    conn.close()
    logging.info(f"Service {data['id']} deleted")
    return jsonify({"status": "ok"})

@app.route('/add_operator', methods=['POST'])
@admin_required
def add_operator():
    name = request.form.get('name')
    password = request.form.get('password')
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("INSERT INTO operators (name, password, status) VALUES (?, ?, 'active')", (name, password))
    conn.commit()
    conn.close()
    logging.info(f"New operator added: {name}")
    return redirect(url_for('admin'))

@app.route('/edit_operator', methods=['POST'])
@admin_required
def edit_operator():
    data = request.get_json()
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    if data.get('password'):
        c.execute("UPDATE operators SET name = ?, password = ?, status = ? WHERE id = ?", 
                  (data['name'], data['password'], data['status'], data['id']))
    else:
        c.execute("UPDATE operators SET name = ?, status = ? WHERE id = ?", 
                  (data['name'], data['status'], data['id']))
    conn.commit()
    conn.close()
    logging.info(f"Operator {data['id']} edited: {data['name']}")
    return jsonify({"status": "ok"})

@app.route('/delete_operator', methods=['POST'])
@admin_required
def delete_operator():
    data = request.get_json()
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("DELETE FROM operators WHERE id = ?", (data['id'],))
    conn.commit()
    conn.close()
    logging.info(f"Operator {data['id']} deleted")
    return jsonify({"status": "ok"})

@app.route('/assign_service', methods=['POST'])
@admin_required
def assign_service():
    data = request.get_json()
    operator_id = data['operator_id']
    service_id = data['service_id']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT * FROM operator_services WHERE operator_id = ? AND service_id = ?", (operator_id, service_id))
    if c.fetchone():
        conn.close()
        return jsonify({"status": "error", "message": "Bu xizmat allaqachon biriktirilgan"})
    
    c.execute("INSERT INTO operator_services (operator_id, service_id) VALUES (?, ?)", (operator_id, service_id))
    conn.commit()
    conn.close()
    logging.info(f"Service {service_id} assigned to operator {operator_id}")
    return jsonify({"status": "ok"})

@app.route('/unassign_service', methods=['POST'])
@admin_required
def unassign_service():
    data = request.get_json()
    operator_id = data['operator_id']
    service_id = data['service_id']
    
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("DELETE FROM operator_services WHERE operator_id = ? AND service_id = ?", (operator_id, service_id))
    conn.commit()
    conn.close()
    logging.info(f"Service {service_id} unassigned from operator {operator_id}")
    return jsonify({"status": "ok"})

@app.route('/display')
def display():
    return render_template('display.html', server_url=SERVER_URL)

@app.route('/tablet/<int:operator_id>')
@login_required
def tablet(operator_id):
    if session['operator_id'] != operator_id:
        abort(403)
    return render_template('tablet.html', operator_id=operator_id, server_url=SERVER_URL)

@app.route('/get_queue')
def get_queue():
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT t.number, o.name FROM tickets t LEFT JOIN operators o ON t.operator_id = o.id WHERE t.status = 'called'")
    tickets = [{"ticket": row[0], "operator_name": row[1]} for row in c.fetchall()]
    conn.close()
    return jsonify(tickets)

@app.route('/operator/<int:operator_id>/tickets')
@login_required
def operator_tickets(operator_id):
    if session['operator_id'] != operator_id:
        abort(403)
    conn = sqlite3.connect('regoffice.db')
    c = conn.cursor()
    c.execute("SELECT number, status FROM tickets WHERE operator_id = ? AND status IN ('waiting', 'called')", (operator_id,))
    tickets = [{"number": row[0], "status": row[1]} for row in c.fetchall()]
    conn.close()
    return jsonify(tickets)

if __name__ == '__main__':
    init_db()
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)

requirements.txt
appdirs==1.4.4
argcomplete==3.6.1
bidict==0.23.1
blinker==1.9.0
cachelib==0.13.0
click==8.1.8
colorama==0.4.6
Flask==3.1.0
flask-cors==5.0.1
Flask-Session==0.8.0
Flask-SocketIO==5.5.1
h11==0.14.0
importlib_resources==6.5.2
itsdangerous==2.2.0
Jinja2==3.1.6
MarkupSafe==3.0.2
msgspec==0.19.0
pillow==11.1.0
python-barcode==0.15.1
python-dotenv==1.1.0
python-engineio==4.11.2
python-escpos==3.1
python-socketio==5.12.1
pyusb==1.3.1
pywin32==310
PyYAML==6.0.2
qrcode==8.0
setuptools==78.1.0
simple-websocket==1.1.0
six==1.17.0
Werkzeug==3.1.3
wsproto==1.2.0


.env
SERVER_URL=http://172.16.1.28:5000

admin_login.html
<!DOCTYPE html>
<html>
<head>
    <title>Admin login</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #2d3748;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
            --danger: #e53e3e;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
            --danger: #f56565;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        .login-container {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .dark .login-container { border: 1px solid #4a5568; }
        h1 {
            font-size: 24px;
            font-weight: 600;
            color: var(--primary);
            text-align: center;
            margin-bottom: 24px;
        }
        form {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        input {
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
            background: #ffffff;
            color: var(--text);
        }
        .dark input { background: #4a5568; border-color: #718096; }
        input:focus { border-color: var(--primary); }
        button {
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            background: var(--primary);
            cursor: pointer;
            transition: all 0.2s;
        }
        button:hover { background: #1666c5; }
        .error {
            color: var(--danger);
            font-size: 14px;
            text-align: center;
            margin-bottom: 16px;
        }
        .controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }
        .lang-btn, .theme-toggle {
            padding: 6px 12px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 12px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle { background: #2d3748; border-color: #4a5568; color: #e2e8f0; }
        .lang-btn:hover, .theme-toggle:hover { background: #eef4fd; }
        .dark .lang-btn:hover, .dark .theme-toggle:hover { background: #4a5568; }
        .lang-btn.active { background: var(--primary); color: #ffffff; border-color: var(--primary); }
    </style>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
    </div>
    <div class="login-container">
        <h1 id="title">Admin login</h1>
        {% if error %}
            <p class="error">{{ error }}</p>
        {% endif %}
        <form method="POST" action="{{ url_for('admin_login') }}">
            <input type="text" name="username" placeholder="Login" required>
            <input type="password" name="password" placeholder="Parol" required>
            <button type="submit">Kirish</button>
        </form>
    </div>
    <script>
        const translations = {
            uz_lat: { title: "Admin login", login: "Login", password: "Parol", submit: "Kirish" },
            uz_cyr: { title: "Админ кириш", login: "Логин", password: "Парол", submit: "Кириш" },
            ru: { title: "Вход для админа", login: "Логин", password: "Пароль", submit: "Войти" },
            en: { title: "Admin login", login: "Username", password: "Password", submit: "Login" }
        };
        let currentLang = "uz_lat";

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            document.getElementById("title").innerText = translations[lang].title;
            document.querySelector("input[name='username']").placeholder = translations[lang].login;
            document.querySelector("input[name='password']").placeholder = translations[lang].password;
            document.querySelector("button[type='submit']").innerText = translations[lang].submit;
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        setLanguage(currentLang);
    </script>
</body>
</html>

admin.html
<!DOCTYPE html>
<html>
<head>
    <title>Admin paneli</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            color: #2d3748;
            padding: 40px;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
            --danger: #e53e3e;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
            --danger: #f56565;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        h1 { text-align: center; font-size: 32px; font-weight: 600; color: var(--primary); margin-bottom: 40px; }
        .section { background: var(--card-bg); border-radius: 12px; padding: 24px; margin-bottom: 24px; }
        h2 { font-size: 20px; font-weight: 600; color: var(--primary); margin-bottom: 16px; }
        form { display: flex; gap: 12px; margin-bottom: 20px; }
        input, select {
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            flex: 1;
            outline: none;
            background: #ffffff;
            color: var(--text);
        }
        .dark input, .dark select { background: #4a5568; border-color: #718096; }
        input:focus, select:focus { border-color: var(--primary); }
        button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.2s;
        }
        .add-btn { background: var(--secondary); }
        .add-btn:hover { background: #2fb34e; }
        .edit-btn { background: var(--primary); }
        .edit-btn:hover { background: #1666c5; }
        .delete-btn { background: var(--danger); }
        .delete-btn:hover { background: #c53030; }
        .assign-btn { background: #ed8936; }
        .assign-btn:hover { background: #dd6b20; }
        table { width: 100%; border-collapse: collapse; background: var(--card-bg); border-radius: 12px; overflow: hidden; }
        th, td { padding: 16px; text-align: left; border-bottom: 1px solid #e2e8f0; }
        .dark th, .dark td { border-bottom: 1px solid #4a5568; }
        th { background: var(--primary); color: #ffffff; font-weight: 600; }
        tr:last-child td { border-bottom: none; }
        tr:hover { background: #f7fafc; }
        .dark tr:hover { background: #4a5568; }
        .controls { text-align: center; margin-bottom: 20px; display: flex; gap: 10px; justify-content: center; }
        .lang-btn, .theme-toggle {
            padding: 6px 12px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 12px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle { background: #2d3748; border-color: #4a5568; color: #e2e8f0; }
        .lang-btn:hover, .theme-toggle:hover { background: #eef4fd; }
        .dark .lang-btn:hover, .dark .theme-toggle:hover { background: #4a5568; }
        .lang-btn.active { background: var(--primary); color: #ffffff; border-color: var(--primary); }
        .stats { margin-top: 20px; font-size: 16px; }
        .service-assign { margin-top: 10px; display: flex; gap: 12px; }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
        <button class="lang-btn" onclick="logout()">Chiqish</button>
    </div>
    <h1 id="title">Admin paneli</h1>
    <div class="section">
        <h2 id="categories_title">Kategoriyalar</h2>
        <form method="POST" action="/add_category">
            <input type="text" name="name" placeholder="Kategoriya nomi">
            <select name="parent_id">
                <option value="">Hech qaysi (asosiy kategoriya)</option>
                {% for cat in categories %}
                    <option value="{{ cat[0] }}">{{ cat[1] }} (ID: {{ cat[0] }})</option>
                {% endfor %}
            </select>
            <button class="add-btn" type="submit">Qo‘shish</button>
        </form>
        <table>
            <tr><th>ID</th><th>Nomi</th><th>Yuqori kategoriya</th><th>Amallar</th></tr>
            {% for category in categories %}
                <tr>
                    <td>{{ category[0] }}</td>
                    <td>{{ category[1] }}</td>
                    <td>{{ category[2] or "Yo‘q" }}</td>
                    <td>
                        <button class="edit-btn" onclick="editCategory({{ category[0] }}, '{{ category[1] }}')">Tahrirlash</button>
                        <button class="delete-btn" onclick="deleteCategory({{ category[0] }})">O‘chirish</button>
                    </td>
                </tr>
            {% endfor %}
        </table>
    </div>
    <div class="section">
        <h2 id="services_title">Xizmatlar</h2>
        <form method="POST" action="/add_service" id="addServiceForm">
            <input type="text" name="name" placeholder="Xizmat nomi">
            <select name="category_id">
                <option value="">Kategoriyani tanlang</option>
                {% for cat in categories %}
                    <option value="{{ cat[0] }}">{{ cat[1] }} (ID: {{ cat[0] }})</option>
                {% endfor %}
            </select>
            <button class="add-btn" type="submit">Qo‘shish</button>
        </form>
        <table>
            <tr><th>ID</th><th>Nomi</th><th>Kategoriya</th><th>Amallar</th></tr>
            {% for service in services %}
                <tr>
                    <td>{{ service[0] }}</td>
                    <td>{{ service[1] }}</td>
                    <td>{{ service[2] }}</td>
                    <td>
                        <button class="edit-btn" onclick="editService({{ service[0] }}, '{{ service[1] }}')">Tahrirlash</button>
                        <button class="delete-btn" onclick="deleteService({{ service[0] }})">O‘chirish</button>
                    </td>
                </tr>
            {% endfor %}
        </table>
    </div>
    <div class="section">
        <h2 id="operators_title">Operatorlar</h2>
        <form method="POST" action="/add_operator">
            <input type="text" name="name" placeholder="Operator ismi">
            <input type="password" name="password" placeholder="Parol">
            <button class="add-btn" type="submit">Qo‘shish</button>
        </form>
        <table>
            <tr><th>ID</th><th>Ism</th><th>Holati</th><th>Xizmatlar</th><th>Amallar</th></tr>
            {% for operator in operators %}
                <tr>
                    <td>{{ operator[0] }}</td>
                    <td>{{ operator[1] }}</td>
                    <td>{{ operator[2] }}</td>
                    <td>
                        <div class="service-assign">
                            <select onchange="assignService({{ operator[0] }}, this.value)">
                                <option value="">Xizmat tanlash</option>
                                {% for service in services %}
                                    <option value="{{ service[0] }}">{{ service[1] }}</option>
                                {% endfor %}
                            </select>
                            <button class="assign-btn" onclick="unassignService({{ operator[0] }})">O‘chirish</button>
                        </div>
                        <ul>
                            {% for os in operator_services if os[0] == operator[0] %}
                                {% for service in services if service[0] == os[1] %}
                                    <li>{{ service[1] }}</li>
                                {% endfor %}
                            {% endfor %}
                        </ul>
                    </td>
                    <td>
                        <button class="edit-btn" onclick="editOperator({{ operator[0] }}, '{{ operator[1] }}', '{{ operator[2] }}')">Tahrirlash</button>
                        <button class="delete-btn" onclick="deleteOperator({{ operator[0] }})">O‘chirish</button>
                    </td>
                </tr>
            {% endfor %}
        </table>
    </div>
    <div class="section">
        <h2 id="analytics_title">Analitika</h2>
        <div class="stats">
            <p id="waiting">Kutayotganlar: {{ waiting|length }}</p>
            <p id="avg_time">O‘rtacha xizmat vaqti: {{ avg_time }} daqiqa</p>
        </div>
        <h3 id="waiting_title">Kutayotgan mijozlar</h3>
        <table>
            <tr><th>Navbat</th><th>Xizmat</th></tr>
            {% for ticket in waiting %}
                <tr><td>{{ ticket[0] }}</td><td>{{ ticket[1] }}</td></tr>
            {% endfor %}
        </table>
        <h3 id="finished_title">Tugatilgan navbatlar</h3>
        <table>
            <tr><th>Navbat</th><th>Xizmat</th><th>Operator</th><th>Yaratildi</th><th>Tugatildi</th></tr>
            {% for stat in stats %}
                <tr><td>{{ stat[0] }}</td><td>{{ stat[1] }}</td><td>{{ stat[2] or 'Yo‘q' }}</td><td>{{ stat[3] }}</td><td>{{ stat[4] }}</td></tr>
            {% endfor %}
        </table>
    </div>

    <script>
        const serverUrl = "{{ server_url }}";
        const socket = io.connect(serverUrl);
        const translations = {
            uz_lat: { 
                title: "Admin paneli", categories: "Kategoriyalar", services: "Xizmatlar", 
                operators: "Operatorlar", analytics: "Analitika", add: "Qo‘shish", edit: "Tahrirlash", 
                delete: "O‘chirish", assign: "O‘chirish", name: "Nomi", actions: "Amallar", 
                status: "Holati", service_name: "Xizmat nomi", operator_name: "Operator ismi", 
                category_name: "Kategoriya nomi", none: "Yo‘q", waiting: "Kutayotganlar", 
                avg_time: "O‘rtacha xizmat vaqti", waiting_title: "Kutayotgan mijozlar", 
                finished_title: "Tugatilgan navbatlar"
            },
            uz_cyr: { 
                title: "Админ панели", categories: "Категориялар", services: "Хизматлар", 
                operators: "Операторлар", analytics: "Аналитика", add: "Қўшиш", edit: "Таҳрирлаш", 
                delete: "Ўчириш", assign: "Ўчириш", name: "Номи", actions: "Амаллар", 
                status: "Ҳолати", service_name: "Хизмат номи", operator_name: "Оператор исми", 
                category_name: "Категория номи", none: "Йўқ", waiting: "Кутаётганлар", 
                avg_time: "Ўртача хизмат вақти", waiting_title: "Кутаётган мижозлар", 
                finished_title: "Тугатилган навбатлар"
            },
            ru: { 
                title: "Админ-панель", categories: "Категории", services: "Услуги", 
                operators: "Операторы", analytics: "Аналитика", add: "Добавить", edit: "Редактировать", 
                delete: "Удалить", assign: "Удалить", name: "Название", actions: "Действия", 
                status: "Статус", service_name: "Название услуги", operator_name: "Имя оператора", 
                category_name: "Название категории", none: "Нет", waiting: "Ожидающих", 
                avg_time: "Среднее время обслуживания", waiting_title: "Ожидающие клиенты", 
                finished_title: "Завершённые талоны"
            },
            en: { 
                title: "Admin Panel", categories: "Categories", services: "Services", 
                operators: "Operators", analytics: "Analytics", add: "Add", edit: "Edit", 
                delete: "Delete", assign: "Remove", name: "Name", actions: "Actions", 
                status: "Status", service_name: "Service name", operator_name: "Operator name", 
                category_name: "Category name", none: "None", waiting: "Waiting", 
                avg_time: "Average service time", waiting_title: "Waiting clients", 
                finished_title: "Finished tickets"
            }
        };
        let currentLang = "uz_lat";

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            document.getElementById("title").innerText = translations[lang].title;
            document.getElementById("categories_title").innerText = translations[lang].categories;
            document.getElementById("services_title").innerText = translations[lang].services;
            document.getElementById("operators_title").innerText = translations[lang].operators;
            document.getElementById("analytics_title").innerText = translations[lang].analytics;
            document.getElementById("waiting_title").innerText = translations[lang].waiting_title;
            document.getElementById("finished_title").innerText = translations[lang].finished_title;
            document.querySelectorAll(".add-btn").forEach(btn => btn.innerText = translations[lang].add);
            document.querySelectorAll(".edit-btn").forEach(btn => btn.innerText = translations[lang].edit);
            document.querySelectorAll(".delete-btn").forEach(btn => btn.innerText = translations[lang].delete);
            document.querySelectorAll(".assign-btn").forEach(btn => btn.innerText = translations[lang].assign);
            document.querySelector(".section:nth-child(2) table th:nth-child(2)").innerText = translations[lang].name;
            document.querySelector(".section:nth-child(2) table th:nth-child(4)").innerText = translations[lang].actions;
            document.querySelector(".section:nth-child(3) table th:nth-child(2)").innerText = translations[lang].name;
            document.querySelector(".section:nth-child(3) table th:nth-child(3)").innerText = translations[lang].status;
            document.querySelector(".section:nth-child(3) table th:nth-child(4)").innerText = translations[lang].services;
            document.querySelector(".section:nth-child(3) table th:nth-child(5)").innerText = translations[lang].actions;
            document.querySelector("input[name='name']").placeholder = translations[lang].service_name;
            document.querySelector("form[action='/add_operator'] input[name='name']").placeholder = translations[lang].operator_name;
            document.getElementById("waiting").innerText = `${translations[lang].waiting}: {{ waiting|length }}`;
            document.getElementById("avg_time").innerText = `${translations[lang].avg_time}: {{ avg_time }} daqiqa`;
        }

        function editCategory(id, name) {
            const newName = prompt(translations[currentLang].category_name + ":", name);
            if (newName) {
                fetch(`${serverUrl}/edit_category`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id, name: newName})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function deleteCategory(id) {
            if (confirm("Kategoriyani o‘chirishni tasdiqlaysizmi?")) {
                fetch(`${serverUrl}/delete_category`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function editService(id, name) {
            const newName = prompt(translations[currentLang].service_name + ":", name);
            if (newName) {
                fetch(`${serverUrl}/edit_service`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id, name: newName})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function deleteService(id) {
            if (confirm("Xizmatni o‘chirishni tasdiqlaysizmi?")) {
                fetch(`${serverUrl}/delete_service`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function editOperator(id, name, status) {
            const newName = prompt(translations[currentLang].operator_name + ":", name);
            const newPassword = prompt("Yangi parol (bo‘sh qoldirish mumkin):", "");
            const newStatus = prompt("Status (active/break):", status);
            if (newName) {
                fetch(`${serverUrl}/edit_operator`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id, name: newName, password: newPassword, status: newStatus || status})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function deleteOperator(id) {
            if (confirm("Operatorni o‘chirishni tasdiqlaysizmi?")) {
                fetch(`${serverUrl}/delete_operator`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({id: id})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function assignService(operatorId, serviceId) {
            if (serviceId) {
                fetch(`${serverUrl}/assign_service`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({operator_id: operatorId, service_id: serviceId})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function unassignService(operatorId) {
            const serviceId = prompt("O‘chiriladigan xizmat ID sini kiriting:");
            if (serviceId) {
                fetch(`${serverUrl}/unassign_service`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({operator_id: operatorId, service_id: serviceId})
                }).then(response => response.json()).then(data => {
                    if (data.status === "error") alert(data.message);
                    else location.reload();
                });
            }
        }

        function logout() {
            window.location.href = '/admin_logout';
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        socket.on('new_ticket', function(data) {
            console.log("New ticket added:", data);
            location.reload();
        });

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        setLanguage(currentLang);
    </script>
</body>
</html>

display.html
<!-- templates/display.html -->
<!DOCTYPE html>
<html lang="uz">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navbat</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        .header {
            display: flex;
            align-items: center;
            background: var(--primary);
            padding: 16px 24px;
            color: #ffffff;
        }
        .header img { width: 80px; margin-right: 20px; border-radius: 8px; transition: transform 0.5s; }
        .header img:hover { transform: rotate(360deg); }
        .header h1 { font-size: 24px; font-weight: 600; }
        .content {
            flex: 1;
            display: flex;
            padding: 20px;
            gap: 20px;
        }
        .video-section {
            width: 60%;
            background: var(--card-bg);
            border-radius: 12px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            transition: all 0.3s;
        }
        .video-section.fullscreen { width: 100%; padding: 0; border-radius: 0; }
        #video-player { width: 100%; height: 85%; border-radius: 8px; background: #000; }
        .datetime {
            text-align: center;
            font-size: 16px;
            color: var(--text);
            padding: 10px;
            background: #edf2f7;
            border-radius: 8px;
            margin-top: 10px;
        }
        .dark .datetime { background: #4a5568; }
        .queue-section { width: 40%; transition: all 0.3s; }
        .queue-section.hidden { width: 0; opacity: 0; }
        table {
            width: 100%;
            border-collapse: collapse;
            background: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
        }
        th, td { padding: 16px; text-align: center; font-size: 18px; border-bottom: 1px solid #e2e8f0; }
        .dark th, .dark td { border-bottom: 1px solid #4a5568; }
        th { background: var(--primary); color: #ffffff; font-weight: 600; }
        tr:last-child td { border-bottom: none; }
        tr:hover { background: #f7fafc; }
        .dark tr:hover { background: #4a5568; }
        .latest-call {
            background: #ffedd5;
            font-weight: bold;
            animation: blink 1s infinite;
        }
        .dark .latest-call { background: #7c3aed; }
        .controls {
            position: absolute;
            top: 16px;
            right: 24px;
            display: flex;
            gap: 10px;
        }
        .lang-btn, .theme-toggle {
            padding: 6px 12px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 12px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle { background: #2d3748; border-color: #4a5568; color: #e2e8f0; }
        .lang-btn:hover, .theme-toggle:hover { background: #eef4fd; }
        .dark .lang-btn:hover, .dark .theme-toggle:hover { background: #4a5568; }
        .lang-btn.active { background: var(--primary); color: #ffffff; border-color: var(--primary); }
        .notification {
            position: absolute;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--secondary);
            color: #ffffff;
            padding: 16px 32px;
            border-radius: 8px;
            font-size: 24px;
            font-weight: 600;
            animation: blink 1s infinite;
            z-index: 1000;
        }
        @keyframes blink { 50% { opacity: 0.7; } }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
    </div>
    <div class="header">
        <img src="/static/logo.png" alt="Logotip">
        <h1>Samarqand davlat universiteti Kattaqo'rg'on filiali</h1>
    </div>
    <div class="content">
        <div class="video-section" id="videoSection">
            <video id="video-player" autoplay muted loop>
                <source src="/static/videos/ad.mp4" type="video/mp4">
            </video>
            <div class="datetime" id="datetime"></div>
        </div>
        <div class="queue-section" id="queueSection">
            <table id="queueTable">
                <tr><th>Operator</th><th>Navbat</th></tr>
            </table>
        </div>
    </div>
    <audio id="notificationSound" src="/static/sounds/notification.mp3" preload="auto"></audio>
    <script>
        const translations = {
            uz_lat: { operator: "Operator", ticket: "Navbat" },
            uz_cyr: { operator: "Оператор", ticket: "Навбат" },
            ru: { operator: "Оператор", ticket: "Талон" },
            en: { operator: "Operator", ticket: "Ticket" }
        };
        let currentLang = "uz_lat";
        const serverUrl = "http://172.16.1.28:5000";
        const socket = io(serverUrl);

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            updateQueueTable();
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        function updateDateTime() {
            const now = new Date();
            document.getElementById("datetime").textContent = now.toLocaleString();
        }
        setInterval(updateDateTime, 1000);
        updateDateTime();

        socket.on("connect", () => console.log("Connected to server"));
        socket.on("disconnect", () => console.log("Disconnected from server"));

        socket.on("update_queue", function(data) {
            if (data.ticket && data.operator_id) {
                const audio = document.getElementById("notificationSound");
                audio.play().catch(err => console.error("Audio play error:", err));
                updateQueueTable(data.ticket);
            }
        });

        socket.on("remove_ticket", function(data) {
            updateQueueTable();
        });

        async function updateQueueTable(latestTicket = null) {
            try {
                const response = await fetch(`${serverUrl}/get_queue`);
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const tickets = await response.json();
                const table = document.getElementById("queueTable");
                table.innerHTML = `<tr><th>${translations[currentLang].operator}</th><th>${translations[currentLang].ticket}</th></tr>`;

                if (tickets.length === 0) {
                    document.getElementById("videoSection").classList.add("fullscreen");
                    document.getElementById("queueSection").classList.add("hidden");
                } else {
                    document.getElementById("videoSection").classList.remove("fullscreen");
                    document.getElementById("queueSection").classList.remove("hidden");
                    tickets.forEach(ticket => {
                        const row = document.createElement("tr");
                        if (ticket.ticket === latestTicket) row.classList.add("latest-call");
                        row.innerHTML = `<td>${ticket.operator_name || 'N/A'}</td><td>${ticket.ticket}</td>`;
                        table.appendChild(row);
                    });
                }
            } catch (error) {
                console.error("Error updating queue:", error);
            }
        }

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        updateQueueTable();
        setInterval(updateQueueTable, 5000);
    </script>
</body>
</html>

index.html
<!DOCTYPE html>
<html>
<head>
    <title>Xizmat tanlash</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #2d3748;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        h1 { font-size: 36px; font-weight: 600; color: var(--primary); margin-bottom: 40px; }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 20px;
            width: 90%;
            max-width: 1200px;
        }
        .card {
            background: var(--card-bg);
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .dark .card { border-color: #4a5568; }
        /* Added classes for visual differentiation */
        .category-card {
            background: #e6f0ff;
            border: 2px solid var(--primary);
            font-weight: 600;
        }
        .subcategory-card {
            background: #f0f5ff;
            border: 2px dashed var(--primary);
        }
        .service-card {
            background: #e6ffed;
            border: 2px solid var(--secondary);
        }
        .dark .category-card {
            background: #2c5282;
        }
        .dark .subcategory-card {
            background: #3b5998;
        }
        .dark .service-card {
            background: #2f855a;
        }
        .card:hover {
            border-color: var(--primary);
            background: #eef4fd;
            transform: scale(1.05);
        }
        .dark .card:hover { background: #4a5568; }
        .card span { font-size: 18px; font-weight: 400; }
        .controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }
        .lang-btn, .theme-toggle, .back-btn, .retry-btn, .page-btn, .return-btn {
            padding: 8px 16px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle, .dark .retry-btn, .dark .page-btn, .dark .return-btn { 
            background: #2d3748; 
            border-color: #4a5568; 
            color: #e2e8f0; 
        }
        .lang-btn:hover, .theme-toggle:hover, .back-btn:hover, .retry-btn:hover, .page-btn:hover, .return-btn:hover { 
            background: #eef4fd; 
        }
        .dark .lang-btn:hover, .dark .theme-toggle:hover, .dark .retry-btn:hover, .dark .page-btn:hover, .dark .return-btn:hover { 
            background: #4a5568; 
        }
        .lang-btn.active { 
            background: var(--primary); 
            color: #ffffff; 
            border-color: var(--primary); 
        }
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--secondary);
            color: #ffffff;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 20px;
            z-index: 1000;
            transition: opacity 0.3s;
            text-align: center;
        }
        .error-message {
            color: #e53e3e;
            font-size: 18px;
            text-align: center;
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            align-items: center;
        }
        #backButton { display: none; margin-bottom: 20px; }
        .pagination {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .ticket-container {
            display: none;
            background: var(--card-bg);
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            margin-top: 20px;
            width: 90%;
            max-width: 400px;
        }
        .dark .ticket-container { border-color: #4a5568; }
        .ticket-container h2 { font-size: 24px; font-weight: 600; color: var(--primary); }
        .ticket-container p { font-size: 18px; margin: 10px 0; }
        .line { border-top: 1px dashed #ccc; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
        <button class="lang-btn" onclick="loadCategories()">Refresh</button>
    </div>
    <h1 id="title">Xizmat tanlash</h1>
    <button id="backButton" class="back-btn" onclick="goBack()">Orqaga</button>
    <div class="grid" id="content"></div>
    <div class="pagination" id="pagination"></div>
    <div class="ticket-container" id="ticketContainer">
        <h2 id="ticketTitle">Sizning navbatingiz</h2>
        <div class="line"></div>
        <p id="ticketNumber"></p>
        <p id="ticketService"></p>
        <p id="ticketWaitTime"></p>
        <div class="line"></div>
        <p id="ticketDateTime"></p>
        <button class="return-btn" onclick="returnToServices()">Xizmatlarga qaytish</button>
    </div>
    <script>
        const translations = {
            uz_lat: { 
                title: "Xizmat tanlash", ticket: "Sizning navbatingiz", wait: "Taxminiy kutish vaqti", 
                error: "Xatolik yuz berdi", no_items: "Hech narsa topilmadi", back: "Orqaga", 
                retry: "Qayta urinish", prev: "Oldingi", next: "Keyingi", service: "Xizmat", 
                dateTime: "Sana va vaqt", return: "Xizmatlarga qaytish"
            },
            uz_cyr: { 
                title: "Хизмат танлаш", ticket: "Сизнинг навбатингиз", wait: "Тахминий кутиш вақти", 
                error: "Хатолик юз берди", no_items: "Ҳеч нарса топилмади", back: "Оръага",
                retry: "Қайта уриниш", prev: "Олдинги", next: "Кейинги", service: "Хизмат", 
                dateTime: "Сана ва вақт", return: "Хизматларга қайтиш"
            },
            ru: { 
                title: "Выберите услугу", ticket: "Ваш талон", wait: "Примерное время ожидания", 
                error: "Произошла ошибка", no_items: "Ничего не найдено", back: "Назад", 
                retry: "Повторить попытку", prev: "Предыдущая", next: "Следующая", service: "Услуга", 
                dateTime: "Дата и время", return: "Вернуться к услугам"
            },
            en: { 
                title: "Select a service", ticket: "Your ticket", wait: "Estimated wait time", 
                error: "An error occurred", no_items: "Nothing found", back: "Back", 
                retry: "Retry", prev: "Previous", next: "Next", service: "Service", 
                dateTime: "Date and time", return: "Return to services"
            }
        };
        let currentLang = "uz_lat";
        const serverUrl = "{{ server_url }}";
        const kioskId = 1;
        let lastTicket = null;
        let categoryStack = [];
        let currentPage = 1;
        let totalItems = 0;
        let perPage = 10;

        async function loadCategories() {
            try {
                const response = await fetch(`${serverUrl}/categories`);
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const categories = await response.json();
                console.log("Categories received:", categories);
                categoryStack = []; // Reset stack for top-level categories
                currentPage = 1;
                document.getElementById("ticketContainer").style.display = "none";
                document.getElementById("content").style.display = "grid";
                document.getElementById("pagination").style.display = "flex";
                renderItems(categories.map(item => ({ id: item.id, name: item.name, isCategory: true, isSubcategory: false })));
                document.getElementById("backButton").style.display = "none";
                renderPagination(categories.length);
            } catch (error) {
                console.error("Error loading categories:", error);
                document.getElementById("content").innerHTML = `
                    <div class="error-message">
                        <p>${translations[currentLang].error}: ${translations[currentLang].no_items}</p>
                        <button class="retry-btn" onclick="loadCategories()">${translations[currentLang].retry}</button>
                    </div>`;
                document.getElementById("pagination").innerHTML = "";
            }
        }

        async function loadItems(categoryId, page = 1) {
            try {
                const response = await fetch(`${serverUrl}/services/${categoryId}?page=${page}`);
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const data = await response.json();
                console.log("Items received for category", categoryId, ":", data);
                const processedItems = data.items.map(item => ({
                    id: item.id,
                    name: item.name,
                    isCategory: item.isCategory,
                    isSubcategory: item.isSubcategory
                }));
                if (page === 1 && !categoryStack.includes(categoryId)) {
                    categoryStack.push(categoryId); // Only push new category on first page
                }
                currentPage = data.page;
                totalItems = data.total;
                perPage = data.per_page;
                document.getElementById("ticketContainer").style.display = "none";
                document.getElementById("content").style.display = "grid";
                document.getElementById("pagination").style.display = "flex";
                renderItems(processedItems);
                document.getElementById("backButton").style.display = categoryStack.length > 0 ? "block" : "none";
                document.getElementById("backButton").innerText = translations[currentLang].back;
                renderPagination(totalItems, categoryId);
            } catch (error) {
                console.error("Error loading items for category", categoryId, ":", error);
                document.getElementById("content").innerHTML = `
                    <div class="error-message">
                        <p>${translations[currentLang].error}: ${error.message}</p>
                        <button class="retry-btn" onclick="loadItems(${categoryId})">${translations[currentLang].retry}</button>
                    </div>`;
                document.getElementById("pagination").innerHTML = "";
            }
        }

        function renderItems(items) {
            const container = document.getElementById("content");
            console.log("Rendering items:", items);
            container.innerHTML = "";
            if (!items || items.length === 0) {
                container.innerHTML = `
                    <div class="error-message">
                        <p>${translations[currentLang].no_items}</p>
                        <button class="retry-btn" onclick="${categoryStack.length > 0 ? `loadItems(${categoryStack[categoryStack.length - 1]})` : 'loadCategories()'}">${translations[currentLang].retry}</button>
                    </div>`;
                return;
            }
            items.forEach(item => {
                const card = document.createElement("div");
                card.className = `card ${item.isCategory ? (item.isSubcategory ? 'subcategory-card' : 'category-card') : 'service-card'}`;
                card.innerHTML = `<span>${item.name}</span>`;
                let isProcessing = false;
                card.onclick = () => {
                    if (isProcessing) return;
                    isProcessing = true;
                    console.log("Clicked item:", item);
                    if (item.isCategory) {
                        loadItems(item.id).finally(() => isProcessing = false);
                    } else {
                        getTicket(item.id, item.name).finally(() => isProcessing = false);
                    }
                };
                container.appendChild(card);
            });
        }

        function renderPagination(total, categoryId = null) {
            const container = document.getElementById("pagination");
            container.innerHTML = "";
            if (total <= perPage) return;

            const totalPages = Math.ceil(total / perPage);
            if (currentPage > 1) {
                const prevBtn = document.createElement("button");
                prevBtn.className = "page-btn";
                prevBtn.innerText = translations[currentLang].prev;
                prevBtn.onclick = () => categoryId ? loadItems(categoryId, currentPage - 1) : loadCategories();
                container.appendChild(prevBtn);
            }
            if (currentPage < totalPages) {
                const nextBtn = document.createElement("button");
                nextBtn.className = "page-btn";
                nextBtn.innerText = translations[currentLang].next;
                nextBtn.onclick = () => categoryId ? loadItems(categoryId, currentPage + 1) : loadCategories();
                container.appendChild(nextBtn);
            }
        }

        async function getTicket(serviceId, serviceName) {
            console.log("Getting ticket for service:", serviceId, serviceName);
            try {
                const response = await fetch(`${serverUrl}/get_ticket`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ service_id: serviceId, lang: currentLang, kiosk_id: kioskId })
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! Status: ${response.status}, Response: ${errorText}`);
                }
                const data = await response.json();
                console.log("Ticket received:", data);
                lastTicket = { ...data, serviceName };
                showTicket(data.ticket, serviceName, data.wait_time);
            } catch (error) {
                console.error("Error getting ticket:", error);
                showNotification(`${translations[currentLang].error}: ${error.message}`);
            }
        }

        function showTicket(ticket, serviceName, waitTime) {
            document.getElementById("content").style.display = "none";
            document.getElementById("pagination").style.display = "none";
            document.getElementById("backButton").style.display = "none";
            document.getElementById("ticketContainer").style.display = "block";
            document.getElementById("ticketTitle").innerText = translations[currentLang].ticket;
            document.getElementById("ticketNumber").innerText = `${translations[currentLang].ticket}: ${ticket}`;
            document.getElementById("ticketService").innerText = `${translations[currentLang].service}: ${serviceName}`;
            document.getElementById("ticketWaitTime").innerText = `${translations[currentLang].wait}: ${waitTime} min`;
            document.getElementById("ticketDateTime").innerText = `${translations[currentLang].dateTime}: ${new Date().toLocaleString()}`;
            document.querySelector(".return-btn").innerText = translations[currentLang].return;
        }

        function showNotification(message) {
            const existing = document.querySelector(".notification");
            if (existing) existing.remove();
            const notification = document.createElement("div");
            notification.className = "notification";
            notification.innerText = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 10000);
        }

        function goBack() {
            if (categoryStack.length <= 1) {
                categoryStack = [];
                loadCategories();
            } else {
                categoryStack.pop();
                loadItems(categoryStack[categoryStack.length - 1], 1); // Reset to page 1
            }
        }

        function returnToServices() {
            document.getElementById("ticketContainer").style.display = "none";
            document.getElementById("content").style.display = "grid";
            document.getElementById("pagination").style.display = "flex";
            if (categoryStack.length === 0) {
                loadCategories();
            } else {
                loadItems(categoryStack[categoryStack.length - 1], 1); // Reset to page 1
            }
        }

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            document.getElementById("title").innerText = translations[lang].title;
            document.getElementById("backButton").innerText = translations[lang].back;
            document.getElementById("ticketTitle").innerText = translations[lang].ticket;
            document.querySelector(".return-btn").innerText = translations[lang].return;
            if (categoryStack.length > 0) loadItems(categoryStack[categoryStack.length - 1], currentPage);
            else loadCategories();
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        loadCategories();
    </script>
</body>
</html>

login.html
<!-- templates/login.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: #f4f7fa;
            margin: 0;
        }
        .login-container {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            width: 300px;
            text-align: center;
        }
        input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            width: 100%;
            padding: 10px;
            background: #1a73e8;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover { background: #1666c5; }
        .error { color: red; margin-top: 10px; }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Operator Login</h2>
        <form method="POST" action="http://172.16.1.28:5000/login">
            <input type="text" name="operator_id" placeholder="Operator ID" required>
            <input type="password" name="password" placeholder="Parol" required>
            <button type="submit">Login</button>
        </form>
        {% if error %}
            <p class="error">{{ error }}</p>
        {% endif %}
    </div>
</body>
</html>

operator.html
<!DOCTYPE html>
<html>
<head>
    <title>Operator</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
            --danger: #e53e3e;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
            --danger: #f56565;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        .container { background: var(--card-bg); border-radius: 12px; padding: 24px; width: 100%; max-width: 600px; }
        h1 { font-size: 24px; font-weight: 600; color: var(--text); text-align: center; margin-bottom: 20px; }
        #current_ticket {
            font-size: 18px;
            padding: 12px;
            background: #edf2f7;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 20px;
            color: var(--text);
        }
        .dark #current_ticket { background: #4a5568; }
        .buttons { display: flex; gap: 12px; flex-wrap: wrap; }
        button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.2s;
        }
        button:disabled {
            background: #a0aec0;
            cursor: not-allowed;
        }
        .call-btn { background: var(--primary); }
        .call-btn:hover { background: #1666c5; }
        .finish-btn { background: var(--secondary); }
        .finish-btn:hover { background: #2fb34e; }
        .redirect-btn { background: #ed8936; }
        .redirect-btn:hover { background: #dd6b20; }
        #history { margin-top: 20px; font-size: 14px; color: #718096; }
        .dark #history { color: #a0aec0; }
        #history div { padding: 6px 0; }
        .controls { margin-bottom: 20px; display: flex; gap: 10px; justify-content: center; }
        .lang-btn, .theme-toggle {
            padding: 6px 12px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 12px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle { background: #2d3748; border-color: #4a5568; color: #e2e8f0; }
        .lang-btn:hover, .theme-toggle:hover { background: #eef4fd; }
        .dark .lang-btn:hover, .dark .theme-toggle:hover { background: #4a5568; }
        .lang-btn.active { background: var(--primary); color: #ffffff; border-color: var(--primary); }
        .redirect-form { margin-top: 20px; display: flex; gap: 12px; }
        select {
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            flex: 1;
            background: #ffffff;
            color: var(--text);
        }
        .dark select { background: #4a5568; border-color: #718096; }
        .chat { margin-top: 20px; }
        .chat-box {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            background: #ffffff;
        }
        .dark .chat-box { border-color: #4a5568; background: #2d3748; }
        .chat-input { display: flex; gap: 12px; }
        textarea {
            flex: 1;
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            resize: none;
            background: #ffffff;
            color: var(--text);
        }
        .dark textarea { background: #4a5568; border-color: #718096; }
        .ticket-list { margin-top: 20px; }
        .ticket-list table { width: 100%; border-collapse: collapse; }
        .ticket-list th, .ticket-list td { padding: 8px; text-align: left; border-bottom: 1px solid #e2e8f0; }
        .dark .ticket-list th, .dark .ticket-list td { border-bottom: 1px solid #4a5568; }
        .ticket-list th { background: var(--primary); color: #ffffff; }
        /* Added style for called ticket */
        .called-ticket {
            background: #ffedd5;
            font-weight: bold;
        }
        .dark .called-ticket {
            background: #7c3aed;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
        <button class="redirect-btn" onclick="location.href='/logout'">Chiqish</button>
    </div>
    <div class="container">
        <h1 id="title">Operator: {{ operator_id }}</h1>
        <div id="current_ticket">Joriy talon: <span id="ticket_number">Yo‘q</span></div>
        <div class="buttons">
            <button class="call-btn" onclick="callTicket()">Chaqirish</button>
            <button class="finish-btn" onclick="finishTicket()">Tugatish</button>
        </div>
        <div class="redirect-form">
            <select id="redirect_operator">
                <option value="">Operator tanlash</option>
                {% for op in operators %}
                    {% if op[0] != operator_id %}
                        <option value="{{ op[0] }}">{{ op[1] }}</option>
                    {% endif %}
                {% endfor %}
            </select>
            <button class="redirect-btn" id="redirectButton" onclick="redirectTicket()">Yo‘naltirish</button>
        </div>
        <div class="ticket-list">
            <h2 id="tickets_title">Mening talonlarim</h2>
            <table id="ticketTable">
                <tr><th>Navbat</th><th>Holati</th></tr>
                {% for ticket in tickets %}
                    <tr><td>{{ ticket[0] }}</td><td>{{ ticket[1] }}</td></tr>
                {% endfor %}
            </table>
        </div>
        <div class="chat">
            <h2 id="chat_title">Chat</h2>
            <div class="chat-box" id="chat_box">
                {% for msg in messages %}
                    <div>{{ msg[0] }}: {{ msg[1] }} ({{ msg[2] }})</div>
                {% endfor %}
            </div>
            <div class="chat-input">
                <textarea id="chat_message" rows="2" placeholder="Xabar yozing"></textarea>
                <button class="call-btn" onclick="sendMessage()">Yuborish</button>
            </div>
        </div>
    </div>
    <script>
        const translations = {
            uz_lat: { 
                title: "Operator", tickets: "Mening talonlarim", chat: "Chat", call: "Chaqirish", 
                finish: "Tugatish", redirect: "Yo‘naltirish", send: "Yuborish", none: "Yo‘q",
                error_no_ticket: "Hech qanday taloon chaqirilmagan!",
                error_no_operator: "Operator tanlanmagan!"
            },
            uz_cyr: { 
                title: "Оператор", tickets: "Менинг талонларим", chat: "Чат", call: "Чақириш", 
                finish: "Тугатиш", redirect: "Йўналтириш", send: "Юбориш", none: "Йўқ",
                error_no_ticket: "Ҳеч қандай талон чақирилмаган!",
                error_no_operator: "Оператор танланмаган!"
            },
            ru: { 
                title: "Оператор", tickets: "Мои талоны", chat: "Чат", call: "Вызвать", 
                finish: "Завершить", redirect: "Перенаправить", send: "Отправить", none: "Нет",
                error_no_ticket: "Ни один талон не вызван!",
                error_no_operator: "Оператор не выбран!"
            },
            en: { 
                title: "Operator", tickets: "My Tickets", chat: "Chat", call: "Call", 
                finish: "Finish", redirect: "Redirect", send: "Send", none: "None",
                error_no_ticket: "No ticket has been called!",
                error_no_operator: "No operator selected!"
            }
        };
        let currentLang = "uz_lat";
        const serverUrl = "{{ server_url }}";
        const operatorId = {{ operator_id }};
        const socket = io(serverUrl);

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            document.getElementById("title").innerText = `${translations[lang].title}: ${operatorId}`;
            document.getElementById("tickets_title").innerText = translations[lang].tickets;
            document.getElementById("chat_title").innerText = translations[lang].chat;
            document.querySelector(".call-btn").innerText = translations[lang].call;
            document.querySelector(".finish-btn").innerText = translations[lang].finish;
            document.querySelector("#redirectButton").innerText = translations[lang].redirect;
            document.querySelector(".chat-input button").innerText = translations[lang].send;
            updateTicketList(); // Refresh ticket list to update translations
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        async function callTicket() {
            try {
                const response = await fetch(`${serverUrl}/call_ticket`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"}
                });
                const data = await response.json();
                if (data.ticket) {
                    document.getElementById("ticket_number").innerText = data.ticket;
                    updateTicketList();
                } else if (data.error) {
                    alert(data.error);
                }
            } catch (error) {
                console.error("Error calling ticket:", error);
                alert(`${translations[currentLang].error_no_ticket}: ${error.message}`);
            }
        }

        async function finishTicket() {
            const ticket = document.getElementById("ticket_number").innerText;
            if (ticket === translations[currentLang].none) {
                alert(translations[currentLang].error_no_ticket);
                return;
            }
            try {
                const response = await fetch(`${serverUrl}/finish_ticket`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({ticket: ticket})
                });
                const data = await response.json();
                if (data.status === "ok") {
                    document.getElementById("ticket_number").innerText = translations[currentLang].none;
                    updateTicketList();
                } else {
                    alert(data.error);
                }
            } catch (error) {
                console.error("Error finishing ticket:", error);
                alert(`${translations[currentLang].error_no_ticket}: ${error.message}`);
            }
        }

        async function redirectTicket() {
            const ticket = document.getElementById("ticket_number").innerText;
            const newOperatorId = document.getElementById("redirect_operator").value;
            if (!newOperatorId) {
                alert(translations[currentLang].error_no_operator);
                return;
            }
            if (ticket === translations[currentLang].none) {
                alert(translations[currentLang].error_no_ticket);
                return;
            }
            try {
                const response = await fetch(`${serverUrl}/redirect_ticket`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({ticket: ticket, new_operator_id: newOperatorId})
                });
                const data = await response.json();
                if (data.status === "ok") {
                    document.getElementById("ticket_number").innerText = translations[currentLang].none;
                    updateTicketList();
                } else {
                    alert(data.error);
                }
            } catch (error) {
                console.error("Error redirecting ticket:", error);
                alert(`${translations[currentLang].error_no_ticket}: ${error.message}`);
            }
        }

        async function sendMessage() {
            const content = document.getElementById("chat_message").value.trim();
            if (!content) return;
            try {
                const response = await fetch(`${serverUrl}/send_message`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({content: content})
                });
                const data = await response.json();
                if (data.status === "ok") {
                    document.getElementById("chat_message").value = "";
                }
            } catch (error) {
                console.error("Error sending message:", error);
                alert(`Error sending message: ${error.message}`);
            }
        }

        socket.on('new_message', function(data) {
            const chatBox = document.getElementById("chat_box");
            const msgDiv = document.createElement("div");
            msgDiv.innerText = `${data.operator_id}: ${data.content} (${data.timestamp})`;
            chatBox.appendChild(msgDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        });

        async function updateTicketList() {
            try {
                const response = await fetch(`${serverUrl}/operator/${operatorId}/tickets`);
                if (!response.ok) throw new Error(`Failed to fetch tickets: ${response.status}`);
                const tickets = await response.json();
                const table = document.getElementById("ticketTable");
                table.innerHTML = `<tr><th>${translations[currentLang].tickets}</th><th>${translations[currentLang].status}</th></tr>`;
                let found = false;
                tickets.forEach(ticket => {
                    const row = document.createElement("tr");
                    if (ticket.status === "called") {
                        row.classList.add("called-ticket");
                        if (!found) {
                            document.getElementById("ticket_number").innerText = ticket.number;
                            found = true;
                        }
                    }
                    row.innerHTML = `<td>${ticket.number}</td><td>${ticket.status}</td>`;
                    table.appendChild(row);
                });
                if (!found) {
                    document.getElementById("ticket_number").innerText = translations[currentLang].none;
                }
                // Update redirect button state
                document.getElementById("redirectButton").disabled = !found;
            } catch (error) {
                console.error("Error updating ticket list:", error);
            }
        }

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        setLanguage("uz_lat");
        updateTicketList();
        setInterval(updateTicketList, 5000);
    </script>
</body>
</html>

tablet.html
<!DOCTYPE html>
<html>
<head>
    <title>Operator Tablet</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', sans-serif;
            background: #f4f7fa;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        :root {
            --bg: #f4f7fa;
            --text: #2d3748;
            --card-bg: #ffffff;
            --primary: #1a73e8;
            --secondary: #34c759;
        }
        body.dark {
            --bg: #1a202c;
            --text: #e2e8f0;
            --card-bg: #2d3748;
            --primary: #63b3ed;
            --secondary: #68d391;
        }
        body {
            background: var(--bg);
            color: var(--text);
        }
        .container {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 24px;
            width: 100%;
            max-width: 800px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        h1 { font-size: 28px; font-weight: 600; color: var(--primary); margin-bottom: 20px; }
        #current_ticket {
            font-size: 48px;
            font-weight: 600;
            padding: 20px;
            background: #edf2f7;
            border-radius: 12px;
            margin-bottom: 30px;
            color: var(--text);
        }
        .dark #current_ticket { background: #4a5568; }
        .buttons { display: flex; gap: 20px; justify-content: center; }
        button {
            padding: 16px 32px;
            border: none;
            border-radius: 12px;
            font-size: 20px;
            font-weight: 600;
            color: #ffffff;
            cursor: pointer;
            transition: all 0.2s;
            min-width: 150px;
        }
        .call-btn { background: var(--primary); }
        .call-btn:hover { background: #1666c5; }
        .finish-btn { background: var(--secondary); }
        .finish-btn:hover { background: #2fb34e; }
        .controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }
        .lang-btn, .theme-toggle {
            padding: 8px 16px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }
        .dark .lang-btn, .dark .theme-toggle { background: #2d3748; border-color: #4a5568; color: #e2e8f0; }
        .lang-btn:hover, .theme-toggle:hover { background: #eef4fd; }
        .dark .lang-btn:hover, .dark .theme-toggle:hover { background: #4a5568; }
        .lang-btn.active { background: var(--primary); color: #ffffff; border-color: var(--primary); }
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--secondary);
            color: #ffffff;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 20px;
            z-index: 1000;
            transition: opacity 0.3s;
            text-align: center;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script>
</head>
<body>
    <div class="controls">
        <button class="lang-btn active" onclick="setLanguage('uz_lat')">Uz (Lat)</button>
        <button class="lang-btn" onclick="setLanguage('uz_cyr')">Ўз (Кирилл)</button>
        <button class="lang-btn" onclick="setLanguage('ru')">Ру</button>
        <button class="lang-btn" onclick="setLanguage('en')">En</button>
        <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
    </div>
    <div class="container">
        <h1 id="title">Operator {{ operator_id }}</h1>
        <div id="current_ticket">{{ translations[currentLang].waiting }}</div>
        <div class="buttons">
            <button class="call-btn" onclick="callTicket()">{{ translations[currentLang].call }}</button>
            <button class="finish-btn" onclick="finishTicket()">{{ translations[currentLang].finish }}</button>
        </div>
    </div>
    <script>
        const translations = {
            uz_lat: { 
                title: "Operator", waiting: "Kutish", call: "Chaqirish", finish: "Tugatish", 
                error_no_ticket: "Hech qanday taloon chaqirilmagan!", error_fetch: "Xatolik yuz berdi" 
            },
            uz_cyr: { 
                title: "Оператор", waiting: "Кутиш", call: "Чакириш", finish: "Тугатиш", 
                error_no_ticket: "Ҳеч қандай талон чақирилмаган!", error_fetch: "Хатолик юз берди" 
            },
            ru: { 
                title: "Оператор", waiting: "Ожидание", call: "Вызвать", finish: "Завершить", 
                error_no_ticket: "Ни один талон не вызван!", error_fetch: "Произошла ошибка" 
            },
            en: { 
                title: "Operator", waiting: "Waiting", call: "Call", finish: "Finish", 
                error_no_ticket: "No ticket has been called!", error_fetch: "An error occurred" 
            }
        };
        let currentLang = "uz_lat";
        const serverUrl = "http://172.16.1.28:5000";
        const socket = io(serverUrl);
        let currentTicket = null;
        const operatorId = {{ operator_id }};

        function setLanguage(lang) {
            currentLang = lang;
            document.querySelectorAll(".lang-btn").forEach(btn => btn.classList.remove("active"));
            document.querySelector(`button[onclick="setLanguage('${lang}')"]`).classList.add("active");
            document.getElementById("title").innerText = `${translations[lang].title} ${operatorId}`;
            document.getElementById("current_ticket").innerText = currentTicket ? currentTicket : translations[lang].waiting;
            document.querySelector(".call-btn").innerText = translations[lang].call;
            document.querySelector(".finish-btn").innerText = translations[lang].finish;
            fetchCurrentTicket();
        }

        function toggleTheme() {
            document.body.classList.toggle("dark");
            const isDark = document.body.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
            document.querySelector(".theme-toggle").innerText = isDark ? "☀️" : "🌙";
        }

        socket.on("update_queue", function(data) {
            if (data.operator_id == operatorId && data.ticket) {
                currentTicket = data.ticket;
                document.getElementById("current_ticket").innerText = currentTicket;
                showNotification(`Chaqirildi: ${currentTicket}`);
            }
        });

        socket.on("remove_ticket", function(data) {
            if (data.ticket === currentTicket) {
                currentTicket = null;
                document.getElementById("current_ticket").innerText = translations[currentLang].waiting;
            }
        });

        async function fetchCurrentTicket() {
            try {
                const response = await fetch(`${serverUrl}/tablet/${operatorId}/data`);
                if (!response.ok) throw new Error(`Failed to fetch tickets: ${response.status}`);
                const tickets = await response.json();
                const calledTicket = tickets.find(t => t.status === "called");
                if (calledTicket) {
                    currentTicket = calledTicket.number;
                    document.getElementById("current_ticket").innerText = currentTicket;
                } else if (!currentTicket) {
                    document.getElementById("current_ticket").innerText = translations[currentLang].waiting;
                }
            } catch (error) {
                console.error("Error fetching tickets:", error);
                showNotification(`${translations[currentLang].error_fetch}: ${error.message}`);
            }
        }

        async function callTicket() {
            try {
                const response = await fetch(`${serverUrl}/call_ticket`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({operator_id: operatorId})
                });
                const data = await response.json();
                if (data.ticket) {
                    currentTicket = data.ticket;
                    document.getElementById("current_ticket").innerText = currentTicket;
                    showNotification(`Chaqirildi: ${currentTicket}`);
                } else if (data.error) {
                    showNotification(data.error);
                }
            } catch (error) {
                console.error("Error calling ticket:", error);
                showNotification(`${translations[currentLang].error_fetch}: ${error.message}`);
            }
        }

        async function finishTicket() {
            if (!currentTicket) {
                showNotification(translations[currentLang].error_no_ticket);
                return;
            }
            try {
                const response = await fetch(`${serverUrl}/finish_ticket`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({ticket: currentTicket, operator_id: operatorId})
                });
                if (response.ok) {
                    showNotification(`Tugatildi: ${currentTicket}`);
                    currentTicket = null;
                    document.getElementById("current_ticket").innerText = translations[currentLang].waiting;
                }
            } catch (error) {
                console.error("Error finishing ticket:", error);
                showNotification(`${translations[currentLang].error_fetch}: ${error.message}`);
            }
        }

        function showNotification(message) {
            const existing = document.querySelector(".notification");
            if (existing) existing.remove();
            const notification = document.createElement("div");
            notification.className = "notification";
            notification.innerText = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark");
            document.querySelector(".theme-toggle").innerText = "☀️";
        }

        setLanguage(currentLang);
        fetchCurrentTicket();
        setInterval(fetchCurrentTicket, 5000);
    </script>
</body>
</html>


Изучай проект нужно добавить QRcode Которые возможно уведить данные после выбора услуг
Sizning navbatingiz
Sizning navbatingiz: 02-002

Xizmat: Moliya

Operator raqami (Ushbu xizmatga biriktirilgan operatorlar. Xizmat ko'rsatilgandan so'ng aynan xizmat ko'rsatgan operator raqami):

Taxminiy kutish vaqti: 0 min

Sana va vaqt: 28.05.2025, 11:32:02

И после обслуживание или не обслужовано нужно будет оценить оператора.

Ещё нужно при выборы услуг нужно фоновый печать по принтеру поумолчению с размерами 60мм на 60мм.
Sizning navbatingiz
Sizning navbatingiz: 02-002

Xizmat: Moliya

Operator raqami (Ushbu xizmatga biriktirilgan operatorlar. Xizmat ko'rsatilgandan so'ng aynan xizmat ko'rsatgan operator raqami):

Taxminiy kutish vaqti: 0 min

Sana va vaqt: 28.05.2025, 11:32:02
И QRcode

Печать происходить через браузер. Как CTRL+P и подтвердить но автоматизировано сразу же после выбора услуг печатать.

Нужно добавить и export отчётов по услугам и операторов в excel файл. Напримерь:
Umumiy	Jami	Noyabr	Dekabr	Yanvar	Fevral	Mart	Aprel	May
Registrator ofisi” tomonidan ko‘rsatiladigan xizmat turlari	7496	2022	585	1045	899	884	319	907
Akademik (o‘quv) faoliyati bo‘yicha ko‘rsatiladigan xizmatlar	1411	204	41	210	250	178	64	64
1. QR kodli diplom shakllantirish;	20	0	10	10	0	0	0	0
2. Akademik maʼlumotnoma va transkript berish;	83	0	15	26	32	6	2	2
3. Akademik mobillik asosida boshqa oliy taʼlim tashkilotiga ketgan talabalarning hujjatlarini tegishli tartibda rasmiylashtirish;	13	0	0	6	7	0	0	0
4. Bitiruvchi talabalar uchun aylanma varaqa yaratish;	30	0	0	20	0	0	0	10
5. Diplom dublikatini olish uchun ariza yuborishga koʻmaklashish;	0	0	0	0	0	0	0	0
6. Imtihon natijalari boʻyicha apellyatsiya arizalarini qabul qilishni tashkil qilish;	46	0	0	46	0	0	0	0
7. Imtihonlar roʻyxatini shakllantirish va talabaga taqdim etish;	44	2	0	0	6	10	13	13
8. Oliy taʼlim tashkilotlari talabalariga oʻqishni koʻchirish va qayta tiklash uchun ariza yuborishga koʻmaklashish;	11	0	0	0	11	0	0	0
9. Oliy taʼlim tashkilotlariga ikkinchi taʼlimga kirish uchun abituriyentlarga onlayn ariza topshirishiga koʻmaklashish;	0	0	0	0	0	0	0	0
10.  Oliy taʼlim tashkilotlarining magistratura bosqichiga kirish uchun abituriyentlarga onlayn ariza topshirishiga koʻmaklashish;	0	0	0	0	0	0	0	0
11. Oliy taʼlim olganlik haqidagi diplom maʼlumotlarini qoʻshish yoki tahrirlash uchun talabgorlarga ariza yuborishga koʻmaklashish;	0	0	0	0	0	0	0	0
12. Stipendiya va turli grant tanlovlarida ishtirok etish uchun ariza qabul qilish;	0	0	0	0	0	0	0	0
13. Talabaga oʻzining GPA koʻrsatkichi haqida maʼlumotnoma taqdim etish;	5	5	0	0	0	0	0	0
14. Talabalar davomatini amaldagi tartibga asosan sababli va sababsiz holatga oʻtkazish;	374	0	0	37	37	83	136	81
15. Talaba uzrli sabablarga ko‘ra (kasal, yaqin qarindoshining betobligi yoki vafoti, tug‘ruq holati kabilar) oraliq va (yoki) yakuniy nazorat turiga kirmagan talabalar uchun tegishli fanlardan shaxsiy grafik yaratish;	30	0	0	0	26	1	2	1
16. Talabalar hujjatlarini qabul qilish va arxivga topshirish;	11	0	0	0	11	0	0	0
17. Talabalarga imtihon natijalarini taqdim etish;	94	0	0	45	49	0	0	0
18. Talabalarga qayta oʻqish uchun ariza berishga koʻmaklashish;	110	0	0	0	0	36	48	26
19. Talabalarga turli xil maʼlumotnoma (oʻqish joyidan, harbiy boʻlimdan v.b.)lar berish;	16	15	0	0	0	1	0	0
20. Talabalarga oʻquv varaqa taqdim etish;	0	0	0	0	0	0	0	0
21. Talabalarga fan resurslari boʻyicha maʼlumot taqdim etish;	5	5	0	0	0	0	0	0
22. Talabalarni HEMIS platformasida keyingi kursga oʻtkazish;	0	0	0	0	0	0	0	0
23. Talabalarni oʻzlashtirish koʻrsatkichlari haqida maʼlumot taqdim etish;	192	110	0	0	42	16	8	16
24. Talabalarning joriy, oraliq va davomat natijalariga koʻra yakuniy nazoratlarda ishtirok etishiga ruxsat berish;	15	0	0	0	0	3	8	4
25. Talabalarning parolini tiklash;	276	59	16	20	10	57	51	63
26. Talabalarning tyutorlar tomonidan to‘g‘ri to‘ldirilgan shaxsiy hamda oʻquv maʼlumotlarini tahrirlash;	0	0	0	0	0	0	0	0
27. Talabalik guvohnomasini tayyorlash va talabalarga taqdim etish;	14	0	0	0	5	9	0	0
28. Talabani bir guruhdan ikkinchi guruhga koʻchirib oʻtkazish;	0	0	0	0	0	0	0	0
29. Tashqi xizmatlar: Ijtimoiy himoya reyestri va ayollar daftarida turuvchi talabalar yagona reestri bazasidan sinxronizatsiya qilib roʻyxat shakllantirish;	1	1	0	0	0	0	0	0
30. Oʻqishini koʻchirishga tavsiya etilgan, o‘qishga tiklangan yoki kursda qolgan talabalarning o‘quv rejalaridagi fanlar farqini aniqlash;	16	2	0	0	14	0	0	0
31. Oʻquv dasturlari haqida maʼlumot berish.	5	5	0	0	0	0	0	0
	0	0	0	0	0	0	0	0
Yoshlar masalalari va ma’naviy-ma’rifiy faoliyat bo‘yicha ko‘rsatiladigan xizmatlar	1805	603	349	374	316	163	0	0
1. Talabalarga yotoqxonalarga joylashish uchun ariza berishga koʻmaklashish;	1570	594	345	322	213	96	0	0
2. Ijara subsidiyasi uchun ariza yozishga koʻmaklashish	235	9	4	52	103	67	0	0
								
Xalqaro aloqalar faoliyati bo‘yicha ko‘rsatiladigan xizmatlar	30	8	12	7	0	3	0	0
1. Talabalarga oʻqish joyidan ingliz tilida maʼlumotnoma berish;	4	4	0	0	0	0	0	0
2. Turli xalqaro grantlar va akademik mobillik dasturlari boʻyicha maʼlumotlarni taqdim etish;	11	0	6	5	0	0	0	0
3. Oʻqishga qabul qilingan xorijlik talabalarni elektron tizimda roʻyxatga olish va fanlarga biriktirish;	1	0	0	1	0	0	0	0
4. Xorijiy oliygohlarda tahsil olishda konsultatsiya berish;	13	4	6	0	0	3	0	0
5. Xorijlik talabalar uchun viza xizmatlarini amalga oshirish;	0	0	0	0	0	0	0	0
6. Xorijlik talabalarga toʻlov-shartnomalarini taqdim etish;	1	0	0	1	0	0	0	0
7. Xorijlik talabalarni Oʻzbekiston Respublikasida vaqtinchalik roʻyxatga qoʻyish xizmatlarini amalga oshirish;	0	0	0	0	0	0	0	0
8. Xorijlik talabalarni oʻqishga qabul qilish boʻyicha konsultatsiya berish, ariza va talab etiladigan hujjatlarni koʻrib chiqish uchun qabul qilish.	0	0	0	0	0	0	0	0
								
Buxgalteriya va marketing boʻyicha koʻrsatiladigan xizmatlar	3448	1066	166	303	203	274	718	718
1. Qayta oʻqishga shartnoma berish;	646	0	0	0	0	0	323	323
2. Stipendiya toʻgʻrisida maʼlumotnoma berish;	145	14	0	89	18	10	7	7
3. Hisob varagʻini shakllantirib berish;	40	0	0	4	2	0	17	17
4. Talabalarga toʻlov-shartnomasi olish uchun ariza berishga koʻmaklashish;	827	771	13	4	7	6	13	13
5. Talabaning yotoqxonalarga joylashish shartnomasi boʻyicha qarzdorligi va haqdorligi haqida maʼlumot berish;	444	96	42	44	64	50	74	74
6. Talabaning qayta oʻqish shartnomasi boʻyicha qarzdorligi va haqdorligi haqida maʼlumot berish;	114	0	0	0	17	29	34	34
7. Talabaning toʻlov-shartnomasi boʻyicha qarzdorligi va haqdorligi haqida maʼlumot berish;	895	183	107	156	95	174	90	90
8. Toʻlov-shartnoma summasi haqida maʼlumot berish;	25	2	4	6	0	5	4	4
9. Bitiruvchi talabalarga boʻlgʻusi ish oʻrni toʻgʻrisida kengroq axborotlar berish, mehnat yarmarkalarni oʻtkazishga koʻmaklashish	312	0	0	0	0	0	156	156
								
Ilmiy faoliyat bo‘yicha ko‘rsatiladigan xizmatlar	49	0	0	33	5	11	0	0
1. Grantlar va tanlovlar haqida maʼlumot berish;	23	0	0	7	5	11	0	0
2. Ilmiy konferensiyalar haqida maʼlumot berish;	21	0	0	21	0	0	0	0
3. Innovatsion gʻoya va startaplarni roʻyxatdan oʻtkazishga koʻmaklashish;	0	0	0	0	0	0	0	0
4. Nomdor stipendiyalar haqida maʼlumot berish;	5	0	0	5	0	0	0	0
5. Ilmiy loyihalar toʻgʻrisida konsultatsiya berish;	0	0	0	0	0	0	0	0
6. Ustoz-shogird maktabiga aʼzo boʻlishga koʻmaklashish.	0	0	0	0	0	0	0	0
					0	0	0	
Koʻrsatilishi zarur boʻlgan boshqa qoʻshimcha xizmatlar	753	141	17	118	125	255	125	125

это всё на первом листе. 
Потом по месяцам, 
	Kunlik jami	252	135	0	107	208	116	89	53	81	1	97	48	104	67	78	160	0	36	52	49	30	25	26	1	28	38	30	31	35	45
Noyabr	Jami	1.11.2024	2.11.2024	3.11.2024	4.11.2024	5.11.2024	6.11.2024	7.11.2024	8.11.2024	9.11.2024	10.11.2024	11.11.2024	12.11.2024	13.11.2024	14.11.2024	15.11.2024	16.11.2024	17.11.2024	18.11.2024	19.11.2024	20.11.2024	21.11.2024	22.11.2024	23.11.2024	24.11.2024	25.11.2024	26.11.2024	27.11.2024	28.11.2024	29.11.2024	30.11.2024
Registrator ofisi” tomonidan ko‘rsatiladigan xizmat turlari	2022																														
Akademik (o‘quv) faoliyati bo‘yicha ko‘rsatiladigan xizmatlar	204																														
1. QR kodli diplom shakllantirish;	0																														
2. Akademik maʼlumotnoma va transkript berish;	0																														
3. Akademik mobillik asosida boshqa oliy taʼlim tashkilotiga ketgan talabalarning hujjatlarini tegishli tartibda rasmiylashtirish;	0																														
4. Bitiruvchi talabalar uchun aylanma varaqa yaratish;	0																														
5. Diplom dublikatini olish uchun ariza yuborishga koʻmaklashish;	0																														
6. Imtihon natijalari boʻyicha apellyatsiya arizalarini qabul qilishni tashkil qilish;	0																														
7. Imtihonlar roʻyxatini shakllantirish va talabaga taqdim etish;	2				2																										
8. Oliy taʼlim tashkilotlari talabalariga oʻqishni koʻchirish va qayta tiklash uchun ariza yuborishga koʻmaklashish;	0																														
9. Oliy taʼlim tashkilotlariga ikkinchi taʼlimga kirish uchun abituriyentlarga onlayn ariza topshirishiga koʻmaklashish;	0																														
10.  Oliy taʼlim tashkilotlarining magistratura bosqichiga kirish uchun abituriyentlarga onlayn ariza topshirishiga koʻmaklashish;	0																														
11. Oliy taʼlim olganlik haqidagi diplom maʼlumotlarini qoʻshish yoki tahrirlash uchun talabgorlarga ariza yuborishga koʻmaklashish;	0																														
12. Stipendiya va turli grant tanlovlarida ishtirok etish uchun ariza qabul qilish;	0																														
13. Talabaga oʻzining GPA koʻrsatkichi haqida maʼlumotnoma taqdim etish;	5					5																									
14. Talabalar davomatini amaldagi tartibga asosan sababli va sababsiz holatga oʻtkazish;	0																														
15. Talaba uzrli sabablarga ko‘ra (kasal, yaqin qarindoshining betobligi yoki vafoti, tug‘ruq holati kabilar) oraliq va (yoki) yakuniy nazorat turiga kirmagan talabalar uchun tegishli fanlardan shaxsiy grafik yaratish;	0																														
16. Talabalar hujjatlarini qabul qilish va arxivga topshirish;	0																														
17. Talabalarga imtihon natijalarini taqdim etish;	0																														
18. Talabalarga qayta oʻqish uchun ariza berishga koʻmaklashish;	0																														
19. Talabalarga turli xil maʼlumotnoma (oʻqish joyidan, harbiy boʻlimdan v.b.)lar berish;	15		15																												
20. Talabalarga oʻquv varaqa taqdim etish;	0																														
21. Talabalarga fan resurslari boʻyicha maʼlumot taqdim etish;	5				5																										
22. Talabalarni HEMIS platformasida keyingi kursga oʻtkazish;	0																														
23. Talabalarni oʻzlashtirish koʻrsatkichlari haqida maʼlumot taqdim etish;	110					110																									
24. Talabalarning joriy, oraliq va davomat natijalariga koʻra yakuniy nazoratlarda ishtirok etishiga ruxsat berish;	0																														
25. Talabalarning parolini tiklash;	59	15	2		15	1	10	1	1	2	1		1	1	2		2			2	2				1						
26. Talabalarning tyutorlar tomonidan to‘g‘ri to‘ldirilgan shaxsiy hamda oʻquv maʼlumotlarini tahrirlash;	0																														
27. Talabalik guvohnomasini tayyorlash va talabalarga taqdim etish;	0																														
28. Talabani bir guruhdan ikkinchi guruhga koʻchirib oʻtkazish;	0																														
29. Tashqi xizmatlar: Ijtimoiy himoya reyestri va ayollar daftarida turuvchi talabalar yagona reestri bazasidan sinxronizatsiya qilib roʻyxat shakllantirish;	1									1																					
30. Oʻqishini koʻchirishga tavsiya etilgan, o‘qishga tiklangan yoki kursda qolgan talabalarning o‘quv rejalaridagi fanlar farqini aniqlash;	2				1			1																							
31. Oʻquv dasturlari haqida maʼlumot berish.	5		5																												
	0																														
Yoshlar masalalari va ma’naviy-ma’rifiy faoliyat bo‘yicha ko‘rsatiladigan xizmatlar	603																														
1. Talabalarga yotoqxonalarga joylashish uchun ariza berishga koʻmaklashish;	594	15	33		26	31	40	19	22	16		40	20	36	14	20	50		20	31	28	21	11	16		14	11	13	12	12	23
2. Ijara subsidiyasi uchun ariza yozishga koʻmaklashish	9	1	2		1			2				1		1		1															

потом по оператором общей:
Оператор, количество услуг, по каждом услуг: обслуживанние, не обслуживан, средная оценка.

Напиши Логика создания Excel-файла (например, с использованием pandas). Для не необслуженного клиента оставить отзыв просто который или чат с оператором который нужно в вкладки общение с клиентами. А клиент и может будет общаться через этот QRcode с оператором, а потом после обслуживание (обслуживание завершить оператор, если клиент решает что обслуживание не завершено нужно репорт за не обслуживание и этого тоже нужно добавить статистику по оператором в excel) дать возможность оценить и комментировать(комментарие не объязательно).
1) Все const serverUrl = "http://172.16.1.28:5000"; должно через .env SERVER_URL=http://172.16.1.28:5000 
2) Нужно подготовить к продакшину под доменом напримерь regoffice.samdukf.uz.
3) Кто могуть скачать excel файла? Разве не админ? Нужно для экспорта выбор оператора, выбор услуг, общая (всё вместе), по датам, по месяцам, по годам, по выбору.
4) Что если клиент ещё не обслуживан но спращивается оценить его?
5) Печать ещё не добавлено походу.

Постепенно напиши полный код каждых файл. Если одного написал для того чтобы к следующему спрашивай продолжить через приказ Keyingisi .